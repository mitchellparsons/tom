import Channel from "../../Channel";
import * as http from "http";
import * as url from "url";

export class HttpChannelServer implements Channel{

  public name: string = "http";
  
  constructor(public channelConfig: any, public actorModule: any) {

    this.server = http.createServer( async (req, res) => {
      res.statusCode = 200;

      res.setHeader('Content-Type', 'text/plain');
      // let val = await this.call(req.url.replace("/",""));
      // console.log("responding with: ", val)
      // res.end(val);
      res.end(await this.call(req.url.replace("/","")));
    });
    
    this.server.listen(channelConfig.port, channelConfig.hostname, () => {
      console.log(`Server running at http://${channelConfig.hostname}:${channelConfig.port}/`);
    });

  }

  private server: http.Server;
  
  async call(funcName: string, ...data) {
    console.log("calling call on http", this.name)
    return this.actorModule[funcName](...data);
  }

  signature() {
    return this.channelConfig;
  }
}

export class HttpChannelClient implements Channel{
  
    public name: string = "http";
    
    constructor(public channelConfig: any, public actorModule: any) {
      this.host = channelConfig.host;
      this.port = channelConfig.port;
    }
    private host: string;
    private port: string;

    async call(funcName: string, ...data) {
      var promise = new Promise((resolve, reject) => {
        http.get(`http://${this.host}:${this.port}/${funcName}`, (resp) => {
          let data = '';
          // A chunk of data has been recieved.
          resp.on('data', (chunk) => {
            data += chunk;
          });
          // The whole response has been received. Print out the result.
          resp.on('end', () => {
            var json  = JSON.parse(data).explanation;
            console.log("DING DING!", json);
            resolve(json);
          });
        
        }).on("error", (err) => {
          console.log("Error: " + err.message);
        });

        console.log("calling call on http", this.name)
        return this.actorModule[funcName](...data);
      });
      return await promise;
    }
    
    signature() {
      return this.channelConfig;
    }
  }

export default async function setup(channelConfig: any, actorModule: any): Promise<Channel> {
  return await new HttpChannel(channelConfig, actorModule);
}

export async function connect(channelConfig: any, actorModule: any): Promise<Channel> {
  return await new HttpChannelClient(channelConfig, actorModule);
}